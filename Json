import hashlib
import time
import json

class Block:
    def __init__(self, index, transactions, timestamp, previous_hash, nonce=0):
        self.index = index
        self.transactions = transactions
        self.timestamp = timestamp
        self.previous_hash = previous_hash
        self.nonce = nonce

    def compute_hash(self):
        block_string = json.dumps(self.__dict__, sort_keys=True)
        return hashlib.sha256(block_string.encode()).hexdigest()

class Blockchain:
    def __init__(self):
        self.chain = []
        self.unconfirmed_transactions = []
        self.create_genesis_block()
        self.total_supply = 21000000
        self.minted = 0
        self.reward = 50

    def create_genesis_block(self):
        genesis_block = Block(0, [], time.time(), "0")
        genesis_block.hash = genesis_block.compute_hash()
        self.chain.append(genesis_block)

    @property
    def last_block(self):
        return self.chain[-1]

    def add_transaction(self, sender, recipient, amount):
        self.unconfirmed_transactions.append({
            "sender": sender,
            "recipient": recipient,
            "amount": amount
        })

    def proof_of_work(self, block, difficulty=4):
        block.nonce = 0
        computed_hash = block.compute_hash()
        while not computed_hash.startswith('0' * difficulty):
            block.nonce += 1
            computed_hash = block.compute_hash()
        return computed_hash

    def add_block(self, block, proof):
        previous_hash = self.last_block.compute_hash()
        if previous_hash != block.previous_hash:
            return False
        if not proof.startswith('0000'):
            return False
        block.hash = proof
        self.chain.append(block)
        return True

    def mine(self, miner_address):
        if self.minted >= self.total_supply:
            print("ðŸ’¸ All MillCion coins have been mined!")
            return False

        self.add_transaction("Network", miner_address, self.reward)
        block = Block(index=self.last_block.index + 1,
                      transactions=self.unconfirmed_transactions,
                      timestamp=time.time(),
                      previous_hash=self.last_block.compute_hash())

        proof = self.proof_of_work(block)
        added = self.add_block(block, proof)
        if added:
            self.unconfirmed_transactions = []
            self.minted += self.reward
            print(f"âœ… Block Mined! Reward of {self.reward} MLC to {miner_address}")
            return block.index
        return False

# ============ Example Usage ==============
mlc = Blockchain()
mlc.add_transaction("user1", "user2", 100)
mlc.mine("Mahmoud")  # Miner gets 50 MLC

# To see the full blockchain:
for block in mlc.chain:
    print(block.__dict__)
