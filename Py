import time
import hashlib
import json

class Block:
    def __init__(self, index, transactions, timestamp, previous_hash, nonce=0):
        self.index = index
        self.transactions = transactions
        self.timestamp = timestamp
        self.previous_hash = previous_hash
        self.nonce = nonce

    def compute_hash(self):
        block_string = json.dumps(self.__dict__, sort_keys=True)
        return hashlib.sha256(block_string.encode()).hexdigest()

class Blockchain:
    difficulty = 4  # عدد الأصفار المطلوبة في بداية الهاش
    mining_reward = 50  # مكافأة التعدين بـ MLC

    def __init__(self):
        self.unconfirmed_transactions = []
        self.chain = []
        self.create_genesis_block()

    def create_genesis_block(self):
        genesis_block = Block(0, [], time.time(), "0")
        genesis_block.hash = genesis_block.compute_hash()
        self.chain.append(genesis_block)

    @property
    def last_block(self):
        return self.chain[-1]

    def add_transaction(self, sender, recipient, amount):
        transaction = {
            'sender': sender,
            'recipient': recipient,
            'amount': amount
        }
        self.unconfirmed_transactions.append(transaction)

    def proof_of_work(self, block):
        block.nonce = 0
        computed_hash = block.compute_hash()
        while not computed_hash.startswith('0' * Blockchain.difficulty):
            block.nonce += 1
            computed_hash = block.compute_hash()
        return computed_hash

    def add_block(self, block, proof):
        previous_hash = self.last_block.compute_hash()
        if previous_hash != block.previous_hash:
            return False
        if not proof.startswith('0' * Blockchain.difficulty):
            return False
        block.hash = proof
        self.chain.append(block)
        return True

    def mine(self, miner_address):
        if not self.unconfirmed_transactions:
            return False
        self.add_transaction("MillCion Network", miner_address, Blockchain.mining_reward)
        new_block = Block(index=self.last_block.index + 1,
                          transactions=self.unconfirmed_transactions,
                          timestamp=time.time(),
                          previous_hash=self.last_block.compute_hash())
        proof = self.proof_of_work(new_block)
        added = self.add_block(new_block, proof)
        self.unconfirmed_transactions = []
        return added

# ----------- اختبار سريع -------------
if __name__ == "__main__":
    chain = Blockchain()
    chain.add_transaction("Founder", "Investor1", 1000)
    chain.add_transaction("Founder", "Investor2", 2000)
    
    print("⛏ Mining started...")
    mined = chain.mine("Miner001")

    if mined:
        print(f"✅ Block {chain.last_block.index} mined successfully!")
        print("🔗 Block Hash:", chain.last_block.hash)
        print("📜 Transactions:", chain.last_block.transactions)
    else:
        print("❌ No transactions to mine.")
